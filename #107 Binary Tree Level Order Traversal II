107 Medium. Binary Tree Level Order Traversal II

Prompt:
Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

My Solution:
class Solution:
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        q = [(root,0)]
        output = []
        list = []
        level = 0
        
        if not root:
            return
        
        while q:
            cur = q.pop(0)
            if cur[1] > level:
                output.append(list)
                list = []
                level = cur[1]
            list.append(cur[0].val)
            if cur[0].left:
                q.append((cur[0].left,cur[1]+1))
            if cur[0].right:
                q.append((cur[0].right,cur[1]+1))
                
        output.append(list)
        
        return output[::-1]
        
 Time Complexity: O(n) Linear time because we are only visiting each node only once.
 Space Complexity: O(n) Linear Space because we only store space up to the total inputs
