#138 Medium. Copy List with Random Pointer

Prompt:
A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.
Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, 
where each new node has its value set to the value of its corresponding original node. 
Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. 
None of the pointers in the new list should point to nodes in the original list.
For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:
val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.


My Solution:
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        dict = {}
        
        if not head:
            return 
        
        cur = head
        
        while cur:
            if cur not in dict:
                dict[cur] = Node(cur.val)
                
            if cur.next is not None and cur.next not in dict:
                dict[cur.next] = Node(cur.next.val)
            if cur.random is not None and cur.random not in dict:
                dict[cur.random] = Node(cur.random.val)

                
            if cur.next is not None:
                dict[cur].next = dict[cur.next]
            if cur.random is not None:
                dict[cur].random = dict[cur.random]
            cur = cur.next
        return dict[head]
        
Time Complexity: O(n) Linear time because we are only traversing the list one time and creating all nodes associated with the current list node at every iteration.
Space Complexit: O(n) Linear space because we are initializing a hashmap to store the copied nodes, can make this constant space if I remove hashmap.
