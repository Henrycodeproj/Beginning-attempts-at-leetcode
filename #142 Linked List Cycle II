#142 Medium. Linked List Cycle II

Prompt:
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). 
It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.

My Solution: 
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dict = {}
        
        while head:
            if head in dict:
                return dict[head]
            dict[head] = head
            head = head.next
        return None
        
Time Complexity: O(n) Linea time because we are traversing every node once and if found we will return that position
Space Complexity: O(n) Linear Space because we are storing potentially storin every node in the dictionary
