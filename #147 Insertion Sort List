#147 Medium. Insertion Sort List

Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:

Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
It repeats until no input elements remain.
The following is a graphical example of the insertion sort algorithm.
The partially sorted list (black) initially contains only the first element in the list.
One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration

My Solution:
class Solution:
    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        q =[]
        cur = head
        while cur:
            q.append(cur.val)
            cur = cur.next
            
        q.sort()
        
        dummy = ListNode()
        temp = dummy
        for i in q:
            temp.next = ListNode(i)
            temp = temp.next
        return dummy.next
        
 Time Complexity: O(n*logn) time because we are using the sort function and it probably uses merge/quick sort which is n log n
 Space Complexity: O(n) Linear Space because we only allocate space to create nodes and to add n values to the queue
