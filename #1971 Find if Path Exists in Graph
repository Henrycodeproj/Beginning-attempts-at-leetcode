1971 Easy. Find if Path Exists in Graph

Prompt:
There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive).
The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi.
Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
You want to determine if there is a valid path that exists from vertex source to vertex destination.
Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

My Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        visited =set()
        alist = {}
        for i in edges:
            if i[1] not in alist:
                alist[i[1]] = []
            if i[0] not in alist:
                alist[i[0]] = []
            alist[i[0]].append(i[1])
            alist[i[1]].append(i[0])
            
                    
        stack = [source]
        while stack:
            a=stack.pop(0)
            if a == destination:
                return True
            else:
                for i in alist[a]:
                    if i not in visited:
                        stack.append(i)
                        visited.add(i)
        return False
        
 Time Complexity: O(v+e) because we are visiting all the vertices and edges
 Space Complexity O(v^2) quadratic Verticies because we are initialize extra space for visited and a dictionary for values
 
