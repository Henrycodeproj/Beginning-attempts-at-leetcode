#2269 Easy.  Find the K-Beauty of a Number

Prompt:
The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:
It has a length of k.
It is a divisor of num.
Given integers num and k, return the k-beauty of num.
Leading zeros are allowed.
0 is not a divisor of any value.
A substring is a contiguous sequence of characters in a string.

My Solution:
class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        l = 0
        r = k
        counter = 0
        num = str(num)
        while r <= len(num):
            val = num[l:r]
            l += 1
            r += 1
            if not int(val):
                continue
            elif int(num) % int(val) == 0:
                counter += 1
        return counter
        
Time Complexity: O(n) Linear time because we only loop through every element once.
Space Complexity: O(k) Subarray Space because we are creating substrings at every iteration.
