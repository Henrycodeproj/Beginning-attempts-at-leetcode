#3 Medium. Longest Substring Without Repeating Characters

Prompt:
Given a string s, find the length of the longest substring without repeating characters.

My Solution:
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        dupe = set()
        maximum = 0
        l = 0 
        for r in range(len(s)):
            while s[r] in dupe:
                dupe.remove(s[l])
                l+=1
            dupe.add(s[r])
            maximum = max(len(s[l:r])+1, maximum)
        return maximum
        
 Time Complexity: O(N^2) **Quadratic Time** because it has the first looping of the length of the array N and a while loop which can potentially loop through
 all of the elements again to get rid of the previous letters, leading to another N and N * N = O(N^2)
 
 Space Complexity: O(N) **Linear Space** Because we will add every letter of N array size
