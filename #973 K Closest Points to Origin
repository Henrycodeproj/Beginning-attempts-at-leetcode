#973 Medium. K Closest Points to Origin

Prompt:
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)^2 + (y1 - y2)^2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

My solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        points = [(math.sqrt((i[0]**2) +(i[1]**2)), i) for i in points]
        heapq.heapify(points)
        res = []
        for i in range(k):
            lowest = heapq.heappop(points)
            res.append(lowest[1])
        return res
        
        
Time Complexity: O(k+log(n)) Log time complexity plus k length because we are essential popping lowest number from the heap for length of k?
Space Complexity: O(log(n) + K) log time plus k space because heapify is log n space and we append k results so we add it to needed space?
