#162. Find Peak Element (Medium)

Description:
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index.
If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words,
an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

My Solution:
      def findPeakElement(self, nums: List[int]) -> int:
        l = 0
        r = len(nums) - 1

        while l <= r:
            m = (l+r) //2
            if l == r or nums[m] > nums[m-1] and nums[m] > nums[m+1]:
                return m
            if nums[m] < nums[m+1]:
                l = m + 1
            elif nums[m] > nums[m+1]:
                r = m - 1


Time Complexity: O(log(n)) Logarithmic time because we are using a modified binary search that discards arry portions that we won't use at every step until we either reach the end of the array/index
Space Complexity: O(1) Constant Space because no other space was allocated in solving the question.
