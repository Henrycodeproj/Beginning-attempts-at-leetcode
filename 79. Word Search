79. (Medium) Word Search

Prompt:
Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once.

My Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        visited = set()
        def dfs(row,col, curWord):

            if curWord == len(word):
                return True

            if row < 0 or col < 0 or row >= len(board) or col >= len(board[0]) or board[row][col] != word[curWord] or (row,col) in visited:
                return False

            visited.add((row,col))
            results = dfs(row+1,col,curWord+1) or dfs(row-1,col,curWord+1) or dfs(row,col+1, curWord+1) or dfs(row,col-1, curWord+1)
            visited.remove((row,col))
            return results
            

        for row in range(len(board)):
            for col in range(len(board[0])):
                if dfs(row,col, 0):
                    return True
        return False

Time Complexity: O(N^2 * 4^n)
Space Complexity: O(n) Linear space complexity
