#938 Easy. Range Sum of BST

Prompt:
Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

My solution:
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        total = []
        #check if top of root is in range, if so add to total
        if low <= root.val <= high:
            total.append(root.val)
        self.visit(root.left, low, high,total)
        self.visit(root.right, low, high,total)
        return total
        
    def visit(self,root, low, high, total):
        if not root:
            return
        if low <= root.val <= high:
            total.append(root.val)
        self.visit(root.left, low, high ,total)
        self.visit(root.right, low, high, total)
        
Time Complexity: O(n) Linear time, goes through n roots
Space Complexity: O(n) Linear Space, total array can potentially be N values
